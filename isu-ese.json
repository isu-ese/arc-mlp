[
  {"id":"bettenburgWhatMakesGood2008","type":"paper-conference","title":"What makes a good bug report?","container-title":"Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of software engineering","publisher":"ACM","page":"308–318","source":"Google Scholar","author":[{"family":"Bettenburg","given":"Nicolas"},{"family":"Just","given":"Sascha"},{"family":"Schröter","given":"Adrian"},{"family":"Weiss","given":"Cathrin"},{"family":"Premraj","given":"Rahul"},{"family":"Zimmermann","given":"Thomas"}],"issued":{"date-parts":[[2008]]}},
  {"id":"bastaniSynthesizingProgramInput2017","type":"paper-conference","title":"Synthesizing program input grammars","container-title":"Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation  - PLDI 2017","publisher":"ACM Press","page":"95-110","source":"DOI.org (Crossref)","event":"the 38th ACM SIGPLAN Conference","abstract":"We present an algorithm for synthesizing a context-free grammar encoding the language of valid program inputs from a set of input examples and blackbox access to the program. Our algorithm addresses shortcomings of existing grammar inference algorithms, which both severely overgeneralize and are prohibitively slow. Our implementation, GLADE, leverages the grammar synthesized by our algorithm to fuzz test programs with structured inputs. We show that GLADE substantially increases the incremental coverage on valid inputs compared to two baseline fuzzers.","URL":"http://dl.acm.org/citation.cfm?doid=3062341.3062349","DOI":"10.1145/3062341.3062349","ISBN":"978-1-4503-4988-8","language":"en","author":[{"family":"Bastani","given":"Osbert"},{"family":"Sharma","given":"Rahul"},{"family":"Aiken","given":"Alex"},{"family":"Liang","given":"Percy"}],"issued":{"date-parts":[[2017]]},"accessed":{"date-parts":[[2019,4,18]]},"publisher-place":"Barcelona, Spain"},
  {"id":"klintEngineeringDisciplineGrammarware2005","type":"article-journal","title":"Toward an engineering discipline for grammarware","container-title":"ACM Transactions on Software Engineering and Methodology","page":"331-380","volume":"14","issue":"3","source":"DOI.org (Crossref)","URL":"http://portal.acm.org/citation.cfm?doid=1072997.1073000","DOI":"10.1145/1072997.1073000","ISSN":"1049331X","language":"en","author":[{"family":"Klint","given":"Paul"},{"family":"Lämmel","given":"Ralf"},{"family":"Verhoef","given":"Chris"}],"issued":{"date-parts":[[2005,7,1]]},"accessed":{"date-parts":[[2019,4,18]]}},
  {"id":"goloveshkinTolerantParsingSpecial2018","type":"article-journal","title":"Tolerant parsing with a special kind of «Any» symbol: the algorithm and practical application","container-title":"Proceedings of the Institute for System Programming of the RAS","page":"7-28","volume":"30","issue":"4","source":"DOI.org (Crossref)","abstract":"Tolerant parsing is a form of syntax analysis aimed at capturing the structure of certain points of interest presented in a source code. While these points should be welldescribed in the corresponding language grammar, other parts of the program are allowed to be not presented in the grammar or to be described coarse-grained, thereby parser remains tolerant to the possible inconsistencies in the irrelevant area. Island grammars are one of the basic tolerant parsing techniques. “Island” is used as the relevant code alias, while the irrelevant code is called “water”. In the paper, a modified LL(1) parsing algorithm with built-in “Any” symbol processing is described. The “Any” symbol matches implicitly defined token sequences. The use of the algorithm for island grammars allows one to reduce irrelevant code description as well as to simplify patterns for relevant code matching. Our “Any” implementation is more accurate and less restrictive in comparison with the closest analogues implemented in Coco/R and LightParse parser generators. It also has potentially lower overhead than the “bounded seas” concept implemented in PetitParser. As shown in the experimental section, the tolerant parser generated by the C# island grammar is proven to be applicable for large-scale software projects analysis.","URL":"http://www.ispras.ru/en/proceedings/isp_30_2018_4/isp_30_2018_4_7/","DOI":"10.15514/ISPRAS-2018-30(4)-1","ISSN":"20798156, 22206426","title-short":"Tolerant parsing with a special kind of «Any» symbol","language":"en","author":[{"family":"Goloveshkin","given":"A.V."},{"family":"Mikhalkovich","given":"S.S."}],"issued":{"date-parts":[[2018]]},"accessed":{"date-parts":[[2019,4,19]]}},
  {"id":"shangTamingVerificationHardness2008","type":"article-journal","title":"Taming verification hardness: an efficient algorithm for testing subgraph isomorphism","container-title":"Proceedings of the VLDB Endowment","page":"364–375","volume":"1","issue":"1","source":"Google Scholar","title-short":"Taming verification hardness","author":[{"family":"Shang","given":"Haichuan"},{"family":"Zhang","given":"Ying"},{"family":"Lin","given":"Xuemin"},{"family":"Yu","given":"Jeffrey Xu"}],"issued":{"date-parts":[[2008]]}},
  {"id":"synytskyyRobustMultilingualParsing2003","type":"paper-conference","title":"Robust multilingual parsing using island grammars","container-title":"Proceedings of the 2003 conference of the Centre for Advanced Studies on Collaborative research","publisher":"IBM Press","page":"266–278","source":"Google Scholar","author":[{"family":"Synytskyy","given":"Nikita"},{"family":"Cordy","given":"James R."},{"family":"Dean","given":"Thomas R."}],"issued":{"date-parts":[[2003]]}},
  {"id":"grindleyIdentificationTertiaryStructure1993","type":"article-journal","title":"Identification of tertiary structure resemblance in proteins using a maximal common subgraph isomorphism algorithm","container-title":"Journal of molecular biology","page":"707–721","volume":"229","issue":"3","source":"Google Scholar","author":[{"family":"Grindley","given":"Helen M."},{"family":"Artymiuk","given":"Peter J."},{"family":"Rice","given":"David W."},{"family":"Willett","given":"Peter"}],"issued":{"date-parts":[[1993]]}},
  {"id":"bacchelliExtractingStructuredData2011","type":"paper-conference","title":"Extracting structured data from natural language documents with island parsing","container-title":"Automated Software Engineering (ASE), 2011 26th IEEE/ACM International Conference on","publisher":"IEEE","page":"476–479","source":"Google Scholar","author":[{"family":"Bacchelli","given":"Alberto"},{"family":"Cleve","given":"Anthony"},{"family":"Lanza","given":"Michele"},{"family":"Mocci","given":"Andrea"}],"issued":{"date-parts":[[2011]]}},
  {"id":"streinCrosslanguageProgramAnalysis2006","type":"paper-conference","title":"Cross-language program analysis and refactoring","container-title":"2006 Sixth IEEE International Workshop on Source Code Analysis and Manipulation","publisher":"IEEE","page":"207–216","source":"Google Scholar","author":[{"family":"Strein","given":"Dennis"},{"family":"Kratz","given":"Hans"},{"family":"Lowe","given":"Welf"}],"issued":{"date-parts":[[2006]]}},
  {"id":"reinhardwilhelmCompilerDesign1995","type":"book","title":"Compiler Design","publisher":"Addison-Wesley","number-of-pages":"606","ISBN":"0-201-42290-5","author":[{"family":"Reinhard Wilhelm","given":"Dieter Maurer"}],"issued":{"date-parts":[[1995,1,1]]},"publisher-place":"Boston, United States"},
  {"id":"deursenBuildingDocumentationGenerators1999","type":"paper-conference","title":"Building documentation generators","container-title":"Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). 'Software Maintenance for Business Change' (Cat. No.99CB36360)","page":"40-49","source":"IEEE Xplore","event":"Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). 'Software Maintenance for Business Change' (Cat. No.99CB36360)","abstract":"In order to maintain the consistency between sources and documentation, while at the same time providing documentation at the design level, it is necessary to generate documentation from sources in such a way that it can be integrated with hand-written documentation. In order to simplify the construction of documentation generators, we introduce island grammars, which only define those syntactic structures needed for (re)documentation purposes. We explain how they can be used to obtain various forms of documentation, such as data dependency diagrams for mainframe batch jobs. Moreover, we discuss how the derived information can be made available via a hypertext structure. We conclude with an industrial case study in which a 600,000 LOC COBOL legacy system is redocumented using the techniques presented in the paper.","DOI":"10.1109/ICSM.1999.792497","author":[{"family":"Deursen","given":"A. Van"},{"family":"Kuipers","given":"T."}],"issued":{"date-parts":[[1999,8]]}},
  {"id":"ullmannAlgorithmSubgraphIsomorphism1976","type":"article-journal","title":"An algorithm for subgraph isomorphism","container-title":"Journal of the ACM (JACM)","page":"31–42","volume":"23","issue":"1","source":"Google Scholar","author":[{"family":"Ullmann","given":"Julian R."}],"issued":{"date-parts":[[1976]]}},
  {"id":"messmerNewAlgorithmErrortolerant1998","type":"article-journal","title":"A new algorithm for error-tolerant subgraph isomorphism detection","container-title":"IEEE Transactions on Pattern Analysis and Machine Intelligence","page":"493–504","volume":"20","issue":"5","source":"Google Scholar","author":[{"family":"Messmer","given":"Bruno T."},{"family":"Bunke","given":"Horst"}],"issued":{"date-parts":[[1998]]}},
  {"id":"bunkeComparisonAlgorithmsMaximum2002","type":"paper-conference","title":"A comparison of algorithms for maximum common subgraph on randomly connected graphs","container-title":"Joint IAPR International Workshops on Statistical Techniques in Pattern Recognition (SPR) and Structural and Syntactic Pattern Recognition (SSPR)","publisher":"Springer","page":"123–132","source":"Google Scholar","author":[{"family":"Bunke","given":"Horst"},{"family":"Foggia","given":"Pasquale"},{"family":"Guidobaldi","given":"Corrado"},{"family":"Sansone","given":"Carlo"},{"family":"Vento","given":"Mario"}],"issued":{"date-parts":[[2002]]}},
  {"id":"cordellaSubGraphIsomorphism2004","type":"article-journal","title":"A (sub) graph isomorphism algorithm for matching large graphs","container-title":"IEEE transactions on pattern analysis and machine intelligence","page":"1367–1372","volume":"26","issue":"10","source":"Google Scholar","author":[{"family":"Cordella","given":"Luigi P."},{"family":"Foggia","given":"Pasquale"},{"family":"Sansone","given":"Carlo"},{"family":"Vento","given":"Mario"}],"issued":{"date-parts":[[2004]]}},
  {"id":"eppsteinSubgraphIsomorphismPlanar2002","type":"chapter","title":"Subgraph isomorphism in planar graphs and related problems","container-title":"Graph Algorithms And Applications I","publisher":"World Scientific","page":"283–309","source":"Google Scholar","author":[{"family":"Eppstein","given":"David"}],"issued":{"date-parts":[[2002]]}},
  {"id":"moonenLightweightImpactAnalysis2002","type":"paper-conference","title":"Lightweight Impact Analysis using Island Grammars.","container-title":"IWPC","publisher":"Citeseer","page":"219–228","source":"Google Scholar","author":[{"family":"Moonen","given":"Leon"}],"issued":{"date-parts":[[2002]]}},
  {"id":"haoxiangLanguagesMachinesIntroduction1988","type":"book","title":"Languages and Machines An Introduction to the Theory of Computer Science","publisher":"Addison-Wesley Longman Publishing Co. Inc.","edition":"3rd","abstract":"Preface The objective of the third edition of Languages and Machines: An Introduction to the Theory of Computer Science remains the same as that of the first two editions, to provide a mathematically sound presentation of the theory of computer","ISBN":"0-201-15768-3","language":"en","author":[{"family":"Haoxiang","given":"Ma"}],"issued":{"date-parts":[[1988]]},"publisher-place":"Boston, MA, USA"},
  {"id":"moonenGeneratingRobustParsers2001","type":"paper-conference","title":"Generating robust parsers using island grammars","container-title":"Proceedings Eighth Working Conference on Reverse Engineering","page":"13-22","source":"IEEE Xplore","event":"Proceedings Eighth Working Conference on Reverse Engineering","abstract":"Source model extraction, the automated extraction of information from system artifacts, is a common phase in reverse engineering tools. One of the major challenges of this phase is creating extractors that can deal with irregularities in the artifacts that are typical for the reverse engineering domain (for example, syntactic errors, incomplete source code, language dialects and embedded languages). The paper proposes a solution in the form of island grammars, a special kind of grammar that combines the detailed specification possibilities of grammars with the liberal behavior of lexical approaches. We show how island grammars can be used to generate robust parsers that combine the accuracy of syntactical analysis with the speed, flexibility and tolerance usually only found in lexical analysis. We conclude with a discussion of the development of MANGROVE, a generator for source model extractors based on island grammars and describe its application to a number of case studies.","DOI":"10.1109/WCRE.2001.957806","author":[{"family":"Moonen","given":"L."}],"issued":{"date-parts":[[2001,10]]}},
  {"id":"ghezziFundamentalsSoftwareEngineering2002","type":"book","title":"Fundamentals of Software Engineering","publisher":"Prentice Hall PTR","edition":"2nd","source":"ACM Digital Library","abstract":"From the Publisher:This book provides selective, in-depth coverage of the fundamentals of software engineering by stressing principles and methods through rigorous formal and informal approaches. In contrast to other books which are based on the lifecycle model of software development, the authors emphasize identifying and applying fundamental principles that are applicable throughout the software lifecycle. This emphasis enables readers to respond to the rapid changes in technology that are common today. Principles and techniques are emphasized rather than specific tools—users learn why particular techniques should or should not be used. Understanding the principles and techniques on which tools are based makes mastering a variety of specific tools easier. The authors discuss principles such as design, specification, verification, production, management and tools. Now coverage includes: more detailed analysis and explanation of object-oriented techniques; the use of Unified Modeling Language (UML); requirements analysis and software architecture; Model checking—a technique that provides automatic support to the human activity of software verification; GQM—used to evaluate software quality and help improve the software process; Z specification language. For software engineers.","ISBN":"978-0-13-305699-0","author":[{"family":"Ghezzi","given":"Carlo"},{"family":"Jazayeri","given":"Mehdi"},{"family":"Mandrioli","given":"Dino"}],"issued":{"date-parts":[[2002]]},"publisher-place":"Upper Saddle River, NJ, USA"},
  {"id":"kuramochiFrequentSubgraphDiscovery2001","type":"paper-conference","title":"Frequent subgraph discovery","container-title":"Data Mining, 2001. ICDM 2001, Proceedings IEEE international conference on","publisher":"IEEE","page":"313–320","source":"Google Scholar","author":[{"family":"Kuramochi","given":"Michihiro"},{"family":"Karypis","given":"George"}],"issued":{"date-parts":[[2001]]}},
  {"id":"huanEfficientMiningFrequent2003","type":"paper-conference","title":"Efficient mining of frequent subgraphs in the presence of isomorphism","container-title":"null","publisher":"IEEE","page":"549","source":"Google Scholar","author":[{"family":"Huan","given":"Jun"},{"family":"Wang","given":"Wei"},{"family":"Prins","given":"Jan"}],"issued":{"date-parts":[[2003]]}},
  {"id":"klusenerDerivingTolerantGrammars2003","type":"paper-conference","title":"Deriving tolerant grammars from a base-line grammar","container-title":"Software Maintenance, 2003. ICSM 2003. Proceedings. International Conference on","publisher":"IEEE","page":"179–188","source":"Google Scholar","author":[{"family":"Klusener","given":"Steven"},{"family":"Lammel","given":"Ralf"}],"issued":{"date-parts":[[2003]]}},
  {"id":"kursBoundedSeas2015","type":"article-journal","title":"Bounded seas","container-title":"Computer languages, systems & structures","page":"114–140","volume":"44","source":"Google Scholar","author":[{"family":"Kurš","given":"Jan"},{"family":"Lungu","given":"Mircea"},{"family":"Iyadurai","given":"Rathesan"},{"family":"Nierstrasz","given":"Oscar"}],"issued":{"date-parts":[[2015]]}},
  {"id":"collardXMLbasedLightweightFact2003","type":"paper-conference","title":"An XML-based lightweight C++ fact extractor","container-title":"Program Comprehension, 2003. 11th IEEE International Workshop on","publisher":"IEEE","page":"134–143","source":"Google Scholar","author":[{"family":"Collard","given":"Michael L."},{"family":"Kagdi","given":"Huzefa H."},{"family":"Maletic","given":"Jonathan I."}],"issued":{"date-parts":[[2003]]}},
  {"id":"carrollIslandParsingInterpreter1983","type":"paper-conference","title":"An island parsing interpreter for the full augmented transition network formalism","container-title":"Proceedings of the first conference on European chapter of the Association for Computational Linguistics","publisher":"Association for Computational Linguistics","page":"101–105","source":"Google Scholar","author":[{"family":"Carroll","given":"John A."}],"issued":{"date-parts":[[1983]]}},
  {"id":"carrollIslandParsingInterpreter1982","type":"report","title":"An island parsing interpreter for Augmented Transition Networks","publisher":"University of Cambridge, Computer Laboratory","source":"www.cl.cam.ac.uk","URL":"https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-33.html","number":"UCAM-CL-TR-33","language":"en","author":[{"family":"Carroll","given":"John A."}],"issued":{"date-parts":[[1982]]},"accessed":{"date-parts":[[2019,2,3]]}},
  {"id":"lischkaVirtualNetworkMapping2009","type":"paper-conference","title":"A virtual network mapping algorithm based on subgraph isomorphism detection","container-title":"Proceedings of the 1st ACM workshop on Virtualized infrastructure systems and architectures","publisher":"ACM","page":"81–88","source":"Google Scholar","author":[{"family":"Lischka","given":"Jens"},{"family":"Karl","given":"Holger"}],"issued":{"date-parts":[[2009]]}},
  {"id":"tomitaWorstcaseTimeComplexity2006","type":"article-journal","title":"The worst-case time complexity for generating all maximal cliques and computational experiments","container-title":"Theoretical Computer Science","collection-title":"Computing and Combinatorics","page":"28-42","volume":"363","issue":"1","source":"ScienceDirect","abstract":"We present a depth-first search algorithm for generating all maximal cliques of an undirected graph, in which pruning methods are employed as in the Bron–Kerbosch algorithm. All the maximal cliques generated are output in a tree-like form. Subsequently, we prove that its worst-case time complexity is O(3n/3) for an n-vertex graph. This is optimal as a function of n, since there exist up to 3n/3 maximal cliques in an n-vertex graph. The algorithm is also demonstrated to run very fast in practice by computational experiments.","URL":"http://www.sciencedirect.com/science/article/pii/S0304397506003586","DOI":"10.1016/j.tcs.2006.06.015","ISSN":"0304-3975","author":[{"family":"Tomita","given":"Etsuji"},{"family":"Tanaka","given":"Akira"},{"family":"Takahashi","given":"Haruhisa"}],"issued":{"date-parts":[[2006,10,25]]},"accessed":{"date-parts":[[2019,5,9]]},"container-title-short":"Theoretical Computer Science"},
  {"id":"raymondMaximumCommonSubgraph","type":"article-journal","title":"Maximum common subgraph isomorphism algorithms for the matching of chemical structures","page":"13","source":"Zotero","abstract":"The maximum common subgraph (MCS) problem has become increasingly important in those aspects of chemoinformatics that involve the matching of 2D or 3D chemical structures. This paper provides a classiﬁcation and a review of the many MCS algorithms, both exact and approximate, that have been described in the literature, and makes recommendations regarding their applicability to typical chemoinformatics tasks.","language":"en","author":[{"family":"Raymond","given":"John W"},{"family":"Willett","given":"Peter"}]},
  {"id":"conteComparisonThreeMaximum2003","type":"paper-conference","title":"A Comparison of Three Maximum Common Subgraph Algorithms on a Large Database of Labeled Graphs","container-title":"Proceedings of the 4th IAPR International Conference on Graph Based Representations in Pattern Recognition","collection-title":"GbRPR'03","publisher":"Springer-Verlag","page":"130–141","source":"ACM Digital Library","abstract":"A graph g is called a maximum common subgraph of two graphs, g1 and g2, if there exists no other common subgraph of g1 and g2 that has more nodes than g. For the maximum common subgraph problem, exact and inexact algorithms are known from the literature. Nevertheless, until now no effort has been done for characterizing their performance, mainly for the lack of a large database of graphs. In this paper, three exact and well-known algorithms for maximum common subgraph detection are described. Moreover, a large database containing various categories of pairs of graphs (e.g. randomly connected graphs, meshes, bounded valence graphs...), having a maximum common subgraph of at least two nodes, is presented, and the performance of the three algorithms is evaluated on this database.","URL":"http://dl.acm.org/citation.cfm?id=1757868.1757884","ISBN":"978-3-540-40452-1","author":[{"family":"Conte","given":"D."},{"family":"Guidobaldi","given":"C."},{"family":"Sansone","given":"C."}],"issued":{"date-parts":[[2003]]},"accessed":{"date-parts":[[2019,5,10]]},"publisher-place":"Berlin, Heidelberg","event-place":"York, UK"},
  {"id":"conteChallengingComplexityMaximum2007","type":"article-journal","title":"Challenging Complexity of Maximum Common Subgraph Detection Algorithms: A Performance Analysis of Three Algorithms on a Wide Database of Graphs","container-title":"J. Graph Algorithms Appl.","page":"99-143","volume":"11","source":"Semantic Scholar","abstract":"Graphs are an extremely general and powerful data structure. In pattern recognition and computer vision, graphs are used to represent patterns to be recognized or classified. Detection of maximum common subgraph (MCS) is useful for matching, comparing and evaluate the similarity of patterns. MCS is a well known NP-complete problem for which optimal and suboptimal algorithms are known from the literature. Nevertheless, until now no effort has been done for characterizing their performance. The lack of a large database of graphs makes the task of comparing the performance of different graph matching algorithms difficult, and often the selection of an algorithm is made on the basis of a few experimental results available. In this paper, three optimal and well-known algorithms for maximum common subgraph detection are described. Moreover a large database containing various categories of pairs of graphs (e.g. random graphs, meshes, bounded valence graphs), is presented, and the performance of the three algorithms is evaluated on this database. Article Type Communicated by Submitted Revised Regular Paper U. Brandes September 2005 January 2007 D. Conte et al., Maximum Common Subgraph, JGAA, 11(1) 99–143 (2007) 100","DOI":"10.7155/jgaa.00139","title-short":"Challenging Complexity of Maximum Common Subgraph Detection Algorithms","author":[{"family":"Conte","given":"Donatello"},{"family":"Foggia","given":"Pasquale"},{"family":"Vento","given":"Mario"}],"issued":{"date-parts":[[2007]]}},
  {"id":"wellingPerformanceAnalysisMaximal2011","type":"paper-conference","title":"A Performance Analysis on Maximal Common Subgraph Algorithms","source":"Semantic Scholar","abstract":"Graphs can be used as a tool to determine similarity between structured objects. The maximal common subgraph of two graphs G and H is the largest graph in terms of edges that is isomorphic to a subgraph of G and H. Finding the maximal common subgraph is an NP-complete problem. It is useful in many areas like (bio)chemistry, file versioning and artificial intelligence. There are many papers that evaluate algorithms for finding maximal common induced subgraphs, but little research has been done on the maximal common subgraph that is not an induced subgraph. We have implemented and benchmarked two maximal common (not induced) subgraph algorithms: a backtrack search algorithm (McGregor), and an algorithm that transforms the maximal common subgraph problem to the largest clique problem (Koch). We created generators for randomly connected and mesh structured graphs, these generators have been used to create a database of graph pairs to benchmark the two algorithms. The results of our benchmark have shown that in most cases Koch is more efficient, because after creating the edge product graph needed for the clique detection. The actual clique detection is a relatively simple search.","author":[{"family":"Welling","given":"Ruud"}],"issued":{"date-parts":[[2011]]}},
  {"id":"durandEfficientAlgorithmSimilarity1999","type":"article-journal","title":"An efficient algorithm for similarity analysis of molecules","container-title":"Internet Journal of Chemistry","page":"1–16","volume":"2","issue":"17","source":"Google Scholar","author":[{"family":"Durand","given":"Paul J."},{"family":"Pasari","given":"Rohit"},{"family":"Baker","given":"Johnnie W."},{"family":"Tsai","given":"Chun-che"}],"issued":{"date-parts":[[1999]]}},
  {"id":"mushtaqMultilingualSourceCode2017","type":"article-journal","title":"Multilingual Source Code Analysis: A Systematic Literature Review","container-title":"IEEE Access","page":"11307-11336","volume":"5","source":"IEEE Xplore","abstract":"Contemporary software applications are developed using cross-language artifacts, which are interdependent with each other. The source code analysis of these applications requires the extraction and examination of artifacts, which are build using multiple programming languages along with their dependencies. A large number of studies presented on multilingual source code analysis and its applications in the last one and half decade. The objective of this systematic literature review (SLR) is to summarize state of the art and prominent areas for future research. This SLR is based on different techniques, tools, and methodologies to analyze multilingual source code applications. We finalized 56 multi-discipline published papers relevant to multilingual source code analysis and its applications out of 3820 papers, filtered through multi-stage search criterion. Based on our findings, we highlight research gaps and challenges in the field of multilingual applications. The research findings are presented in the form of research problems, research contributions, challenges, and future prospects. We identified 46 research issues and requirements for analyzing multilingual applications and grouped them in 13 different software engineering domains. We examined the research contributions and mapped them with individual research problems. We presented the research contributions in the form of tools techniques and approaches that are presented in the form of research models, platforms, frameworks, prototype models, and case studies. Every research has its limitations or prospects for future research. We highlighted the limitations and future perspectives and grouped them in various software engineering domains. Most of the research trends and potential research areas are identified in static source code analysis, program comprehension, refactoring, reverse engineering, detection, and traceability of cross-language links, code coverage, security analysis, cross-language parsing, and abstraction of source code models.","DOI":"10.1109/ACCESS.2017.2710421","ISSN":"2169-3536","title-short":"Multilingual Source Code Analysis","author":[{"family":"Mushtaq","given":"Z."},{"family":"Rasool","given":"G."},{"family":"Shehzad","given":"B."}],"issued":{"date-parts":[[2017]]}}
]
