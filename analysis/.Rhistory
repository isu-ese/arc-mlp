# Levene's Test
leveneTest()
library(asd) # for dunnett's
install.packages("PMCMRplus")
install.packages("ggpubr")
install.packages("nortest")
# read in data
data <- read.csv2(file = "experiments-result-1.csv")
# read in data
data <- read.csv2(file = "experiments-result-1.csv")
# read in data
data <- read.csv2(file = "./experiments-result-1.csv")
")
data <- read.csv2(file = "experiments-result-1.c
setwd("/home/git/isuese/papers/arc-mlp/analysis/")
data <- read.csv2(file = "experiments-result-1.csv")
View(data)
View(data)
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",")
View(data)
View(data)
names(data)
f1 <- aov(formula = full.HAL ~ factor(size) + similarity_threshold, data = data )
f1 <- aov(formula = data$full.HAL ~ factor(data$size) + data$similarity_threshold)
f1 <- aov(formula = data$full.HAL ~ data$size + data$similarity_threshold)
f1 <- aov(formula = data$full.HAL ~ factor(data$size) + factor(data$similarity_threshold))
summary(f1)
f1 <- aov(formula = data$full.HAL ~ factor(data$size) + factor(data$similarity_threshold))
f1 <- aov(formula = data$full.HAL ~ data$size + factor(data$similarity_threshold))
f1 <- aov(formula = data$full.HAL ~ data$size + data$similarity_threshold)
f1 <- aov(formula = data$full.HAL ~ data$similarity_threshold)
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",")
f1 <- aov(formula = data$full.HAL ~ data$similarity_threshold)
summary(data)
data['sizeF'] <- as.factor(data$size)
summary(data)
as.numeric(data$similarity_threshold)
data$similarity_threshold
as.factor(data$similarity_threshold)
data['stF'] <- as.factor(data$similarity_threshold)
summary(data)
f1 <- aov(formula = data$full.HAL ~ data$sizeF + data$stF)
f1 <- aov(formula = as.numeric(data$full.HAL) ~ data$sizeF + data$stF)
summary(f1)
as.numeric(data$full.HAL)
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",", as.is = T)
as.numeric(data$full.HAL)
f1 <- aov(formula = as.numeric(data$full.HAL) ~ data$sizeF + data$stF)
data['sizeF'] <- as.factor(data$size)
data['stF'] <- as.factor(data$similarity_threshold)
f1 <- aov(formula = as.numeric(data$full.HAL) ~ data$sizeF + data$stF)
summary(f1)
# Q-Q Plots
qqnorm(data$full.HAL)
par(mfrow=c(2,2))
plot(f1)
library(ggpubr) # for nice graphs
library(nortest) # for anderson-darling test
library(PMCMRplus)
ggboxplot(data, x = "sizeF", y = "full.HAL", color = "supp",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(data, x = "sizeF", y = "full.HAL", color = "supp",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(data, x = "sizeF", y = "full.HAL", color = "similarity_threshold",
palette = c("#00AFBB", "#E7B800"))
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(data, x = "sizeF", y = "full.HAL",
palette = c("#00AFBB", "#E7B800"))
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(data, x = "sizeF", y = "similarity_threshold",
palette = c("#00AFBB", "#E7B800"))
data['stF'] <- as.factor(data$similarity_threshold)
data['sizeF'] <- as.factor(data$size)
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(data, x = "sizeF", y = "full.HAL", color = "stF",
palette = c("#00AFBB", "#E7B800"))
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(data, x = "sizeF", y = "full.HAL", color = "stF",
palette = c("red", "green", "blue", "orange", "cyan"))
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(f1, x = "sizeF", y = "full.HAL", color = "stF",
palette = c("red", "green", "blue", "orange", "cyan"))
ggline(my_data, x = "sizeF", y = "full.HAL", color = "stF",
add = c("mean_se", "dotplot"),
palette = c("red", "green", "blue", "orange", "cyan"))
ggline(data, x = "sizeF", y = "full.HAL", color = "stF",
add = c("mean_se", "dotplot"),
palette = c("red", "green", "blue", "orange", "cyan"))
ggline(data, x = "full.HAL", y = "sizeF", color = "stF",
add = c("mean_se", "dotplot"),
palette = c("red", "green", "blue", "orange", "cyan"))
as.numeric(data$full.HAL)
data['nHal'] <- as.numeric(data$full.HAL)
ggline(data, x = "nHal", y = "sizeF", color = "stF",
add = c("mean_se", "dotplot"),
palette = c("red", "green", "blue", "orange", "cyan"))
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(data, x = "sizeF", y = "nHal", color = "stF",
palette = c("red", "green", "blue", "orange", "cyan"))
data['deltaHAL'] = data[,data$trivial.HAL] - data[,data$full.HAL]
data['deltaHAL'] = data[data$trivial.HAL] - data[data$full.HAL]
data['deltaHAL'] = data$trivial.HAL - data$full.HAL
data['deltaHAL'] = as.numeric(data$trivial.HAL) - as.numeric(data$full.HAL)
f1 <- aov(formula = data$deltaHAL ~ data$sizeF + data$stF)
summary(f1)
# Anderson-Darling Test
ad.test(x = data$deltaHAL, )
shapiro.test(x = data$deltaHAL)
# Normality Tests
ad.test(x = data$deltaHAL)
# Levene's Test
leveneTest(data$deltaHAL)
# Levene's Test
leveneTest(data$deltaHAL, delta$sizeF)
# Levene's Test
leveneTest(data$deltaHAL, data$sizeF)
install.packages("pwr2")
library(pwr2)
f1 <- aov(formula = data$deltaHAL ~ data$sizeF + data$stF)
summary(f1)
f2 <- lm()
f2 <- lm(data$deltaHAL ~ data$sizeF + data$stF)
summary(f2)
f2 <- lm(data$nHAL ~ data$sizeF + data$stF)
summary(f2)
f1 <- aov(formula = data$nHAL ~ data$sizeF + data$stF)
summary(f1)
delta
summary(f1)
f2 <- lm(data$deltaHAL ~ data$sizeF + data$stF)
summary(f2)
# Basic Plots of data
# Box plot with multiple groups
# +++++++++++++++++++++
# Plot tooth length ("len") by groups ("dose")
# Color box plot by a second group: "supp"
ggboxplot(data, x = "sizeF", y = "nHal", color = "stF",
palette = c("red", "green", "blue", "orange", "cyan"))
ggline(data, x = "nHal", y = "sizeF", color = "stF",
add = c("mean_se", "dotplot"),
palette = c("red", "green", "blue", "orange", "cyan"))
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = 10000 , f.B = 10000 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.025, beta = 0.025, f.A = 10000 , f.B = 10000 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = 10000 , f.B = 10000 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
View(data)
setwd("/home/git/isuese/papers/arc-mlp/analysis/")
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",", as.is = T, quote = "\"")
data['deltaHAL'] = as.numeric(data$trivial.HAL) - as.numeric(data$full.HAL)
View(data)
hist(data$deltaHAL)
data[,deltaHAL < 0]
subset(data, (deltaHAL < 0))
# Anova Analysis
summary(data)
data['stF'] <- as.factor(data$similarity_threshold)
data['nHal'] <- as.numeric(data$full.HAL)
data['deltaHAL'] = as.numeric(data$trivial.HAL) - as.numeric(data$full.HAL)
data['sizeF'] <- as.factor(data$size)
f1 <- aov(formula = data$deltaHAL ~ data$sizeF + data$stF)
summary(f1)
f2 <- lm(data$deltaHAL ~ data$sizeF + data$stF)
summary(f2)
par(mfrow=c(2,2))
plot(f1)
View(data)
# Levene's Test for HOV
leveneTest(data$deltaHAL, data$sizeF)
# Normality Tests
ad.test(x = data$deltaHAL)
shapiro.test(x = data$deltaHAL)
# Friedman Test
friedman.test(data$deltaHAL ~ data$sizeF | data$stF)
# Friedman Test
friedman.test(data$deltaHAL ~ data$sizeF + data$stF)
# Friedman Test
friedman.test(data$deltaHAL,data$sizeF,data$stF)
# Friedman Test
friedman.test(data$deltaHAL,data$sizeF)
# Friedman Test
friedman.test(data$deltaHAL,data$sizeF,data$stF)
View(data)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = 10000 , f.B = 10000 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.01, beta = 0.01, f.A = 10000 , f.B = 10000 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
# Anova Analysis
rep0 <- subset(data, (data$repetition = 0))
# Anova Analysis
rep0 <- subset(data, (data$repetition == 0))
rep1 <- subset(data, (data$repetition == 0))
# Friedman Test
friedman.test(rep0$deltaHAL,rep0$sizeF,rep0$stF)
friedman.test(rep1$deltaHAL,rep1$sizeF,rep1$stF)
friedman.test(rep1$deltaHAL,rep1$sizeF,rep1$stF)
f1 <- aov(formula = rep0$deltaHAL ~ rep0$sizeF + rep0$stF)
summary(f1)
rep1 <- subset(data, (data$repetition == 1))
friedman.test(rep1$deltaHAL,rep1$sizeF,rep1$stF)
# Friedman Test
friedman.test(rep0$deltaHAL,rep0$sizeF,rep0$stF)
friedman.test(rep1$deltaHAL,rep1$sizeF,rep1$stF)
f1 <- aov(formula = rep1$deltaHAL ~ rep1$sizeF + rep1$stF)
summary(f1)
f2 <- lm(data$deltaHAL ~ data$sizeF + data$stF)
summary(f2)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = 10000 , f.B = 10000 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = 10 , f.B = 10 , delta.A = 1000, delta.B = 1000, sigma.A =65000 , sigma.B = 84000, B = 1000)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = 10 , f.B = 10 , delta.A = 10, delta.B = 10, sigma.A =65000 , sigma.B = 84000, B = 1000)
f1 <- aov(formula = data$deltaHAL ~ data$sizeF + data$stF)
summary(f1)
summary(f2)
library(car) # for levene's
library(asd) # for dunnett's
library(ggpubr) # for nice graphs
library(nortest) # for anderson-darling test
library(PMCMRplus) # for steel test
library(pwr2) # power and sample size analysis
# read in data
setwd("/home/git/isuese/papers/arc-mlp/analysis/")
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",", as.is = T, quote = "\"")
# Anova Analysis
rep0 <- subset(data, (data$repetition == 0))
rep1 <- subset(data, (data$repetition == 1))
summary(data)
data['sizeF'] <- as.factor(data$size)
data['stF'] <- as.factor(data$similarity_threshold)
data['nHal'] <- as.numeric(data$full.MCC)
data['deltaHAL'] = as.numeric(data$trivial.MCC) - as.numeric(data$full.MCC)
f1 <- aov(formula = data$deltaMCC ~ data$sizeF + data$stF)
summary(f1)
f2 <- lm(data$deltaMCC ~ data$sizeF + data$stF)
summary(f2)
data['deltaMCC'] = as.numeric(data$trivial.MCC) - as.numeric(data$full.MCC)
f1 <- aov(formula = data$deltaMCC ~ data$sizeF + data$stF)
summary(f1)
f2 <- lm(data$deltaMCC ~ data$sizeF + data$stF)
summary(f2)
f2 <- lm(data$deltaMCC ~ data$stF)
f1 <- aov(formula = data$deltaMCC ~ data$stF)
summary(f1)
f2 <- lm(data$deltaMCC ~ data$stF)
summary(f2)
f2 <- lm(data$deltaMCC ~ data$trivial.TERM + data$stF)
summary(f2)
f2 <- lm(data$deltaMCC ~ data$nterm + data$stF)
summary(f2)
data['nterm']
View(data)
View(data)
as.numeric(data$full.TERM)
data['nterm'] <- as.numeric(data$full.TERM)
data['nterm']
f2 <- lm(data$deltaMCC ~ data$nterm + data$stF)
summary(f2)
boxplot(data$trivial.TERM ~ data$sizeF)
boxplot(data$nterm ~ data$sizeF)
))
boxplot(data$nt
par(mfrow=c(1,1))
boxplot(data$nterm ~ data$sizeF)
par(mfrow=c(1,1))
boxplot(data$nterm ~ data$sizeF)
boxplot(data$nterm ~ data$sizeF)
View(data)
View(data)
f1 <- Anova(data$deltaMCC ~ data$stF,type=3)
f2 <- lm(data$deltaMCC ~ data$nterm + data$stF)
f1 <- Anova(f2,type=3)
summary(f1)
summary(f2)
f2 <- lm(data$deltaMCC ~ data$sizeF + data$stF)
f1 <- Anova(f2,type=3)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = NULL , f.B = NULL , delta.A = 10, delta.B = 10, sigma.A =1000 , sigma.B = 1500, B = 1000)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = NULL , f.B = NULL , delta.A = 10, delta.B = 10, sigma.A =1000 , sigma.B = 1500, B = 100)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = NULL , f.B = NULL , delta.A = 10, delta.B = 10, sigma.A =1000 , sigma.B = 1500, B = 10)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = NULL , f.B = NULL , delta.A = 10, delta.B = 10, sigma.A =1000 , sigma.B = 1500, B = 9)
# Size Analysis
ss.2way(a = 3, b = 5, alpha = 0.05, beta = 0.05, f.A = NULL , f.B = NULL , delta.A = 10, delta.B = 10, sigma.A =1000 , sigma.B = 1500, B = 4)
w=c(2,2))
plot(f1)
par(mfrow=c(2,2))
plot(f1)
par(mfrow=c(2,2))
qqplot(f1)
f1 <- Anova(f2,type=3)
summary(f1)
par(mfrow=c(2,2))
qqplot(f2)
qqplot(aov(data$deltaMCC ~ data$sizeF + data$stF))
qqplot(aov(data$deltaMCC ~ data$sizeF + data$stF))
data['sizeF'] <- as.factor(data$size)
data['stF'] <- as.factor(data$similarity_threshold)
data['nHal'] <- as.numeric(data$full.MCC)
data['deltaMCC'] = as.numeric(data$trivial.MCC) - as.numeric(data$full.MCC)
data['nterm'] <- as.numeric(data$full.TERM)
as.numeric(data$full.TERM)
qqplot(aov(data$deltaMCC ~ data$sizeF + data$stF))
plot(aov(data$deltaMCC ~ data$sizeF + data$stF))
boxCox(data$detlaMCC)
boxCox(data$deltaMCC)
boxCox(f2)
boxCox(f1)
boxCox(aov(data$deltaMCC ~ data$sizeF + data$stF))
boxCoxVariable(data$deltaMCC)
library(car) # for levene's
library(asd) # for dunnett's
library(ggpubr) # for nice graphs
library(nortest) # for anderson-darling test
library(PMCMRplus) # for steel test
library(pwr2) # power and sample size analysis
# read in data
setwd("/home/git/isuese/papers/arc-mlp/analysis/")
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",", as.is = T, quote = "\"")
setwd("/home/git/isuese/papers/arc-mlp/analysis/")
data <- read.csv2(file = "experiments-result.csv", header = T, sep = ",", as.is = T, quote = "\"")
View(data)
View(data)
data <- read.csv2(file = "experiments-result-1.csv", header = T, sep = ",", as.is = T, quote = "\"")
data <- read.csv2(file = "experiments-1-result.csv", header = T, sep = ",", as.is = T, quote = "\"")
View(data)
View(data)
summary(data)
data['sizeF'] <- as.factor(data$size)
data['stF'] <- as.factor(data$similarity_threshold)
data['nHal'] <- as.numeric(data$full.HAL)
data['deltaHAL'] = as.numeric(data$trivial.HAL) - as.numeric(data$full.HAL)
f1 <- aov(formula = data$deltaHAL ~ data$sizeF + data$stF)
summary(f1)
f2 <- lm(data$deltaHAL ~ data$sizeF + data$stF)
summary(f2)
par(mfrow=c(2,2))
plot(f1)
# Levene's Test for HOV
leveneTest(data$deltaHAL, data$sizeF)
ad.test(x = data$deltaHAL)
shapiro.test(x = data$deltaHAL)
View(data)
View(data)
data1 <- subset(data, (data$dependent_variable == "HAL"))
data1 <- subset(data, (data$dependent_variable == "HAL"))
summary(data1)
data1['sizeF'] <- as.factor(data1$size)
data1['stF'] <- as.factor(data1$similarity_threshold)
data1['nHal'] <- as.numeric(data1$full.HAL)
data1['deltaHAL'] = as.numeric(data1$trivial.HAL) - as.numeric(data1$full.HAL)
f1 <- aov(formula = data1$deltaHAL ~ data1$sizeF + data1$stF)
summary(f1)
f2 <- lm(data1$deltaHAL ~ data1$sizeF + data1$stF)
summary(f2)
# Levene's Test for HOV
leveneTest(data1$deltaHAL, data1$sizeF)
# Normality Tests
ad.test(x = data1$deltaHAL)
shapiro.test(x = data1$deltaHAL)
boxcox(data1$deltaHAL ~ data1$sizeF + data1$stF)
library(MASS) # boxcox procedure
boxcox(data1$deltaHAL ~ data1$sizeF + data1$stF)
data1['logDelta'] = log(data1$deltaHAL)
# Friedman Test
friedman.test(data1$deltaHAL,data1$sizeF,data1$stF)
install.packages("lmPerm")
summary(aov(y~treatement+block, rcbd)) # parametric test for rcbd
y <- data1$deltaHAL
treatment <- data1$stF
block <- data1$sizeF
rcbd <- data.frame(y, block, treatment) # data-frame
summary(aov(y~treatement+block, rcbd)) # parametric test for rcbd
summary(aovp(y~treatment+block, rcbd)) # permutation test for rcbd
library(lmPerm) # for permutation f-test
y <- data1$deltaHAL
treatment <- data1$stF
block <- data1$sizeF
rcbd <- data.frame(y, block, treatment) # data-frame
summary(aov(y~treatement+block, rcbd)) # parametric test for rcbd
summary(aovp(y~treatment+block, rcbd)) # permutation test for rcbd
# Steele's Test
steelTest(y~block, data=rcbd, alternative="less")
# Steele's Test
steelTest(y~treatment, data=rcbd, alternative="less")
# Steele's Test
levels(treatement)
# Steele's Test
levels(treatment)
levels(treatment) <- c("1.0", "0.001", "0.25", "0.5", "0.75")
steelTest(y~treatment, data=rcbd, alternative="less")
steelTest(y~treatment, data=rcbd, alternative="greater")
levels(treatment)
rcbd <- data.frame(y, block, treatment) # data-frame
steelTest(y~treatment, data=rcbd, alternative="less")
steelTest(y~treatment, data=rcbd, alternative="greater")
library(car) # for levene's
library(asd) # for dunnett's
library(ggpubr) # for nice graphs
library(nortest) # for anderson-darling test
library(PMCMRplus) # for steel test
library(pwr2) # power and sample size analysis
library(MASS) # boxcox procedure
library(lmPerm) # for permutation f-test
data1 <- subset(data, (data$dependent_variable == "MCC"))
summary(data1)
data1['sizeF'] <- as.factor(data1$size)
data1['stF'] <- as.factor(data1$similarity_threshold)
data1['nHal'] <- as.numeric(data1$full.HAL)
data1['deltaHAL'] = as.numeric(data1$trivial.HAL) - as.numeric(data1$full.HAL)
f1 <- aov(formula = data1$deltaHAL ~ data1$sizeF + data1$stF)
summary(f1)
f2 <- lm(data1$deltaHAL ~ data1$sizeF + data1$stF)
summary(f2)
par(mfrow=c(2,2))
plot(f1)
data1 <- subset(data, (data$dependent_variable == "MCC"))
summary(data1)
data1['sizeF'] <- as.factor(data1$size)
data1['stF'] <- as.factor(data1$similarity_threshold)
data1['nMCC'] <- as.numeric(data1$full.MCC)
data1['deltaMCC'] = as.numeric(data1$trivial.MCC) - as.numeric(data1$full.MCC)
f1 <- aov(formula = data1$deltaMCC ~ data1$sizeF + data1$stF)
summary(f1)
f2 <- lm(data1$deltaMCC ~ data1$sizeF + data1$stF)
summary(f2)
# Friedman Test
friedman.test(data1$deltaMCC,data1$sizeF,data1$stF)
friedman.test(rep1$deltaMCC,rep1$sizeF,rep1$stF)
# Q-Q Plots
par(mfrow=c(2,2))
plot(f1)
# Levene's Test for HOV
leveneTest(data1$deltaMCC, data1$sizeF)
ad.test(x = data1$deltaMCC)
shapiro.test(x = data1$deltaMCC)
y <- data1$deltaMCC
treatment <- data1$stF
block <- data1$sizeF
levels(treatment) <- c("1.0", "0.001", "0.25", "0.5", "0.75")
rcbd <- data.frame(y, block, treatment) # data-frame
summary(aov(y~treatment+block, rcbd)) # parametric test for rcbd
summary(aovp(y~treatment+block, rcbd)) # permutation test for rcbd
steelTest(y~treatment, data=rcbd, alternative="greater")
with(data1, (interaction.plot(stF, sizeF, deltaMCC, type="b", pch = c(18, 24, 22), leg.bty = "o"))
)
with(data1, (interaction.plot(stF, sizeF, deltaMCC, type="b", pch = c(18, 24, 22), leg.bty = "o", main="Interaction Plot of Similarity Threshold and Grammar Size", xlab = "Similarity Threshold", ylab = "Delta MCC")))
with(data1, (interaction.plot(stF, sizeF, deltaMCC, type="b", pch = c(18, 24, 22), leg.bty = "o", main="Interaction Plot of Similarity Threshold and Grammar Size", xlab = "Similarity Threshold", ylab = "Delta MCC")))
with(data1, (interaction.plot(stF, sizeF, deltaHAL, type="b", pch = c(18, 24, 22), leg.bty = "o", main="Interaction Plot of Similarity Threshold and Grammar Size", xlab = "Similarity Threshold", ylab = "Delta HAL")))
f1 <- aov(formula = data1$deltaHAL ~ data1$sizeF * data1$stF)
summary(f1)
f2 <- lm(data1$deltaHAL ~ data1$sizeF * data1$stF)
summary(f2)
par(mfrow=c(2,2))
plot(f1)
hist(data1$deltaHAL, seq(0,8,0.25), col="green", main="Histogram of Delta HAL")
hist(data1$deltaHAL, col="green", main="Histogram of Delta HAL")
hist(data1$deltaHAL, col="green", main="Histogram of Delta HAL", xlab="Delta HAL")
hist(data1$deltaHAL, col="green", main="Histogram of Delta HAL", xlab="Delta HAL")
knitr::opts_chunk$set(echo = TRUE)
# imports
library(car) # for levene's
library(asd) # for dunnett's
library(ggpubr) # for nice graphs
library(nortest) # for anderson-darling test
library(PMCMRplus) # for steel test
library(pwr2) # power and sample size analysis
library(MASS) # boxcox procedure
library(lmPerm) # for permutation f-test
# read in data
setwd("/home/git/isuese/papers/arc-mlp/analysis/")
data <- read.csv2(file = "experiments-1-result.csv", header = T, sep = ",", as.is = T, quote = "\"")
summary(data1)
# Separate Data out for MCC and HAL
dataHal <- subset(data, (data$dependent_variable == "HAL"))
dataHal['sizeF'] <- as.factor(dataHal$size)
dataHal['stF'] <- as.factor(dataHal$similarity_threshold)
dataHal['nHal'] <- as.numeric(dataHal$full.HAL)
dataHal['deltaHAL'] = as.numeric(dataHal$trivial.HAL) - as.numeric(dataHal$full.HAL)
summary(subset(dataHal$deltaHAL, (dataHal$sizeF == "small")))
summary(subset(dataHal$deltaHAL, (dataHal$sizeF == "medium")))
summary(subset(dataHal$deltaHAL, (dataHal$sizeF == "large")))
summary(subset(dataHal$deltaHAL, (dataHal$sizeF == "medium")))
hist(dataHal$deltaHAL, col="green", main="Histogram of Delta HAL", xlab="Delta HAL")
